\section{Specification Development} 

The first step to synthesize a correct-by-construction controller is to 
create a .salt file that contains the specifications.Here we describe an example. This example can be found salty/examples/middleware.salty

First we define the controller

\begin{lstlisting}
controller Middleware where
\end{lstlisting}

Then we define the enums that we declared for x and y

\begin{lstlisting}
enum Command = None | ST_2_A | ST_2_B
enum Behavior = Loiter | Refuel | Search | Upload | Track
\end{lstlisting}

then we define the inputs

\begin{lstlisting}
input m_1_Fuel_0_0  : Bool = False
input m_2_Fuel_0_0  : Bool = False
input m_1_Found_2_0 : Bool = False

input p_1_Command_0_0 : Command = None
input p_2_Loiter_0_0  : Bool    = True
\end{lstlisting}

and the outputs

\begin{lstlisting}
output b_1_Behavior_0_0 : Behavior = Loiter
output b_2_Behavior_0_0 : Behavior = Loiter
\end{lstlisting}

here we define the abbreviations

\begin{lstlisting}
def p_1_Loiter_0_0 = p_1_Command_0_0  == None
def p_1_ST_2_A     = p_1_Command_0_0  == ST_2_A
def p_1_ST_2_B     = p_1_Command_0_0  == ST_2_B

def b_1_Loiter_0_0 = b_1_Behavior_0_0 == Loiter
def b_1_Refuel_0_0 = b_1_Behavior_0_0 == Refuel
def b_1_Search_0_0 = b_1_Behavior_0_0 == Search
def b_1_Search_0_1 = b_1_Behavior_0_0 == Search
def b_1_Track_2_0  = b_1_Behavior_0_0 == Track
def b_2_Loiter_0_0 = b_2_Behavior_0_0 == Loiter
def b_2_Refuel_0_0 = b_2_Behavior_0_0 == Refuel
def b_2_Search_0_0 = b_2_Behavior_0_0 == Search
\end{lstlisting}

here we define macros

\begin{lstlisting}
def play(cmd,health,switch,b1,b2) =
  sys_trans
    (cmd /\ health /\  switch) -> b1
    (cmd /\ health /\ !switch) -> b2

def contingency(health,action) =
  sys_trans
    ! health -> action
\end{lstlisting}

calling the macros

\begin{lstlisting}    
play(p_1_ST_2_A,!m_1_Fuel_0_0,m_1_Found_2_0,b_1_Search_0_0,b_1_Track_2_0)
play(p_1_ST_2_B,!m_1_Fuel_0_0,m_1_Found_2_0,b_1_Search_0_1,b_1_Track_2_0)

contingency(!m_1_Fuel_0_0,b_1_Refuel_0_0)
contingency(!m_2_Fuel_0_0,b_2_Refuel_0_0)
\end{lstlisting}

The rest of the specs

\begin{lstlisting}
sys_trans
  !p_1_Loiter_0_0 -> !b_1_Loiter_0_0
  !p_2_Loiter_0_0 -> !b_2_Loiter_0_0
  (p_1_Loiter_0_0 /\ !m_1_Fuel_0_0) -> b_1_Loiter_0_0
  (p_2_Loiter_0_0 /\ !m_2_Fuel_0_0) -> b_2_Loiter_0_0  
\end{lstlisting}  

we save the file as middleware.salt

\section{Synthesis: Python} 

\begin{lstlisting}
salty bla bla
\end{lstlisting}
This will generate the file xxx

Inspecting the file we see

\begin{lstlisting}
this
\end{lstlisting}
\begin{lstlisting}
this
\end{lstlisting}
\begin{lstlisting}
and this
\end{lstlisting}

The file can be used this way

\begin{lstlisting}
xxx
\end{lstlisting}

\section{Synthesis: Java} 

This will generate the file xxx

Inspecting the file we see

\begin{lstlisting}
this
\end{lstlisting}
\begin{lstlisting}
this
\end{lstlisting}
\begin{lstlisting}
and this
\end{lstlisting}

The file can be used this way

\begin{lstlisting}
xxx
\end{lstlisting}

\section{Synthesis: C++} 

This will generate the file xxx

Inspecting the file we see

\begin{lstlisting}
this
\end{lstlisting}
\begin{lstlisting}
this
\end{lstlisting}
\begin{lstlisting}
and this
\end{lstlisting}

The file can be used this way

\begin{lstlisting}
xxx
\end{lstlisting}