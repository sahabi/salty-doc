% -*-latex-*-

\section{Salty Description}

Salty is a strongly-typed domain specific language for aiding GR(1) synthesis that 
provides a front-end to the Slugs synthesis tool.  

\section{Current State}

Salty is currently under active development, and can be used to produce Java, Python, 
and C++ source from a GR(1) specification using Slugs. Salty also performs sanity checking
using Z3 theorem prover.

\section{Language Goals}

\textbf{Readibality:} Salty aims to make controller specifications easier to read by

\begin{itemize}
 \item Allowing macro definitions to give a name to complex behavior:
 \item Adding syntactic-sugar for things like if-then-else
 \item Allowing state variables to range over values of an enumeration, rather than just integer values
\end{itemize}

\noindent \textbf{Usability:} Salty provides a friendly interface to Slugs GR(1) synthesizer. Sanity checking
is performed before the specifications are passed to Slugs using Z3 theorem prover.

\noindent \textbf{Integrability:} Salty generates controller implementations in Python, Java, and C++.

\section{Getting Started}

The source code for Salty and the most up-to-date directions to build and install Salty
can be found in the project's repository at \url{https://github.com/GaloisInc/salty}

\subsection{Dependencies}

\subsubsection{Stack}

It is easiest to build salty using the Stack tool. 
Stack will manage the installation of all haskell dependencies, as well as the 
GHC compiler itself. Visit \url{https://docs.haskellstack.org/en/stable/README/} for
directions on how to build and install Stack.

\subsubsection{Slugs}

You will need to build and install the Slugs GR(1) synthesis tool. 
Once installed, you can tell Salty where to find the Slugs executable by passing 
the -s or --slugs flag. There is no installation target in the Slugs Makefile, 
however the Slugs executable has no runtime dependencies, 
and can just be copied into your \$PATH. Visit 
\url{https://github.com/VerifiableRobotics/slugs} for directions on how to 
build and install Slugs.

\subsubsection{Z3 (Optional)}

Salty will do some additional sanity checking of specifications before sending 
them to slugs. Visit \url{https://github.com/Z3Prover/z3} for directions on how to 
build and install Z3.

\subsection{Building}

Once Stack and Slugs are installed, Salty can be built:

\begin{lstlisting}[language=bash]
system_prompt> stack build
\end{lstlisting}

Optionally, you can install Salty globally using the \lstinline{stack install} 
command, which will place the Salty binary in \$HOME/.local/bin.
The examples can be built by running \lstinline{make} in the examples/ directory, 
and will place all of the generated Java code in the examples/build directory.

\subsection{Running}

You can run \lstinline{salty} with the .salt file as an input along with a suitable option(s). 
The input options are listed below.

\begin{lstlisting}[language=bash]
system_prompt> salty [OPTIONS] <controller.salt>
\end{lstlisting}

\subsubsection{Input options}

\begin{center}
\begin{tabular}{l@{\qquad}l}
-h --help                    & Display the help message \\
-a --annotations             & Output information about annotations \\
-j[PACKAGE] --java[=PACKAGE] & Output a Java implementation of the controller, as this package\\
-p --python                  & Output a Python implementation of the controller\\
-d --dot                     & Output a graphviz representation of the controller\\
--cpp[=NAMESPACE]            & Output a C++ implementation of the controller\\
-o PATH --output=PATH        & Optional output directory for artifacts\\
-s PATH --slugs=PATH         & The path to the Slugs executable\\
-z PATH --z3=PATH            & The path to the Z3 executable\\
-l N --length=N              & The number of input variables in the slugs output\\
-O NUMBER                    & Enable/disable optimizations by passing 0/1\\
--disable-sanity             & Disable the sanity checker\\
--ddump-parse                & Dump the parse tree for the controller\\
--ddump-core                 & Dump the core representation of the type-checked controller\\
--ddump-expanded             & Dump the expanded form of the controller\\
--ddump-simpl                & Dump the simplified expanded form of the controller\\
--ddump-opt                  & Dump the optimized core representation of the type-checked controller\\
--ddump-spec                 & Dump the input to slugs and its output\\
--ddump-sanity               & Dump intermediate output during sanity checking\\

\end{tabular}
\end{center}
